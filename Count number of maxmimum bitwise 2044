Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.

The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).

 

Example 1:

Input: nums = [3,1]
Output: 2
Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:
- [3]
- [3,1]




public class Solution {
    private int maxOr;
    private int count;

    public int countMaxOrSubsets(int[] nums) {
        maxOr = 0;
        count = 0;
        
        // Step 1: Calculate the maximum possible OR by OR'ing all elements
        for (int num : nums) {
            maxOr |= num;
        }
        
        // Step 2: Recursively count subsets with the maximum OR
        countSubsets(nums, 0, 0);
        
        return count;
    }
    
    // Step 2: Helper function for recursion
    private void countSubsets(int[] nums, int index, int currentOr) {
        // Base case: If we have processed all elements
        if (index == nums.length) {
            if (currentOr == maxOr) {
                count++;
            }
            return;
        }
        
        // Recursive case: include or exclude the current element
        // Include the current element
        countSubsets(nums, index + 1, currentOr | nums[index]);
        
        // Exclude the current element
        countSubsets(nums, index + 1, currentOr);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[] nums1 = {3, 1};
        System.out.println(solution.countMaxOrSubsets(nums1));  // Output: 2
        
        // Example 2
        int[] nums2 = {2, 2, 2};
        System.out.println(solution.countMaxOrSubsets(nums2));  // Output: 7
        
        // Example 3
        int[] nums3 = {3, 2, 1, 5};
        System.out.println(solution.countMaxOrSubsets(nums3));  // Output: 6
    }
}
